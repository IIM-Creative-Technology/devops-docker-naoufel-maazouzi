{"version":3,"sources":["Components/SideDrawer/DrawerToggleButton.js","redux/filmSearch/types.js","redux/filmSearch/filmSearchActions.js","Components/Navbar/Header.jsx","redux/filmWithGenres/types.js","redux/filmWithGenres/filmWithGenresActions.js","Components/Pagination/Pagination.jsx","Components/FilmsWithGenres/FilmsWithGenres.jsx","redux/filmsDetails/types.js","redux/filmsDetails/filmsDetailsActions.js","Components/FilmsDetails/FilmsDetails.jsx","Components/SideDrawer/SideDrawer.js","Components/Backdrop/Backdrop.js","App.js","serviceWorker.js","redux/filmWithGenres/filmWithGenresReducers.js","redux/filmSearch/filmSearchReducers.js","redux/filmsDetails/filmsDetailsReducers.js","redux/rootReducer.js","index.js"],"names":["drawerToggleButton","click","className","onClick","FETCH_FILMS_SEARCH_SUCCES","FETCH_FILMS_SEARCH_FAIL","FETCH_FILMS_SEARCH_REFRESH","fetchFilmsSearchRefresh","type","payload","fetchFilmsSearch","searchFilm","dispatch","Axios","get","then","response","filmSearch","data","catch","error","errorMsgFilmSearch","message","fetchFilmsSearchFail","connect","state","search","drawerClickHandler","useDispatch","href","to","exact","onSubmit","e","preventDefault","target","elements","nomFilm","value","placeholder","name","FETCH_FILMS_GENRES_SUCCES","FETCH_FILMS_GENRES_FAIL","fetchFilmsWithGenres","id","pageNumber","window","scrollTo","films","fetchFilmsSuccess","errorMsg","fetchFilmsFail","filmsData","filmsWithGenres","ownProps","page","pageLinks","filmsTotalPages","totalPages","filmsCurrentPage","currentPage","i","active","push","titreSection","filmsTotalResults","totalResults","useEffect","searchFilmsFetched","results","length","map","index","title","icon","faPlayCircle","alt","src","poster_path","filmsFetched","FETCH_FILMS_DETAILS_SUCCES","FETCH_FILMS_DETAILS_FAIL","fetchFilmsDetails","params","detailsFilmData","errorMsgFilmDetails","fetchFilmsDetailsFail","filmsDetails","match","filmsDetailsFetched","backdrop_path","overview","original_title","release_date","sideDrawer","getMovies","refresh","drawerClasses","show","backdrop","App","useState","sideDrawerOpen","setSideDrawerOpen","backdropClickHandler","path","component","FilmsDetails","Boolean","location","hostname","initialeState","filmWithGenresReducers","action","total_results","total_pages","filmSearchReducers","filmsDetailsReducers","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7eca4a2b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './DrawerToggleButton.css';\r\n\r\nconst drawerToggleButton = ({ click }) => (\r\n    <button className=\"toggle-button\" onClick={click}>\r\n        <div className=\"toggle-button__line\"></div>\r\n        <div className=\"toggle-button__line\"></div>\r\n        <div className=\"toggle-button__line\"></div>\r\n    </button>\r\n);\r\n\r\nexport default drawerToggleButton","export const FETCH_FILMS_SEARCH_SUCCES = 'FETCH_FILMS_SEARCH_SUCCES';\r\nexport const FETCH_FILMS_SEARCH_FAIL = 'FETCH_FILMS_SEARCH_FAIL';\r\nexport const FETCH_FILMS_SEARCH_REFRESH = 'FETCH_FILMS_SEARCH_REFRESH';","import { FETCH_FILMS_SEARCH_SUCCES, FETCH_FILMS_SEARCH_FAIL, FETCH_FILMS_SEARCH_REFRESH } from './types';\r\nimport Axios from 'axios';\r\n\r\nexport const fetchFilmsSearchSuccess = (search) => {\r\n    return {\r\n        type: FETCH_FILMS_SEARCH_SUCCES,\r\n        payload: search\r\n    }\r\n}\r\n\r\nexport const fetchFilmsSearchFail = (error) => {\r\n    return {\r\n        type: FETCH_FILMS_SEARCH_FAIL,\r\n        payload: error\r\n    }\r\n}\r\n\r\nexport const fetchFilmsSearchRefresh = () => {\r\n    return {\r\n        type: FETCH_FILMS_SEARCH_REFRESH,\r\n        payload: []\r\n    }\r\n}\r\n\r\nexport const fetchFilmsSearch = (searchFilm) => {\r\n    return (dispatch) => {\r\n        Axios.get(`https://api.themoviedb.org/3/search/movie?query=${searchFilm}&api_key=c0f2b3829e285f40ea8719b23184af1b&language=fr`)\r\n            .then(response => {\r\n                const filmSearch = response.data;\r\n                dispatch(fetchFilmsSearchSuccess(filmSearch));\r\n            })\r\n            .catch(error => {\r\n                const errorMsgFilmSearch = error.message;\r\n                dispatch(fetchFilmsSearchFail(errorMsgFilmSearch));\r\n            })\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './Header.css';\r\nimport DrawerToggleButton from '../SideDrawer/DrawerToggleButton';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { fetchFilmsSearch, fetchFilmsSearchRefresh } from '../../redux/filmSearch/filmSearchActions';\r\nimport { connect, useDispatch } from 'react-redux';\r\n\r\nconst Header = ({ drawerClickHandler, fetchFilmsSearch }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const _onSubmit = (e) => {\r\n        e.preventDefault();\r\n        fetchFilmsSearch(e.target.elements.nomFilm.value);\r\n        e.target.elements.nomFilm.value = '';\r\n    }\r\n\r\n    return (\r\n        <header className=\"toolbar\">\r\n            <nav className=\"toolbar__navigation\">\r\n                <div className=\"toolbar__toggle-button\">\r\n                    <DrawerToggleButton click={drawerClickHandler} />\r\n                </div>\r\n                <div className=\"toolbar__logo\"><a href=\"/\">Naou</a></div>\r\n                <div className=\"spacer\"></div>\r\n                <div className=\"toolbar_navigation-items\">\r\n                    <ul>\r\n                        <Link to=\"/\" exact onClick={() => dispatch(fetchFilmsSearchRefresh())}>\r\n                            <li>Accueil</li>\r\n                        </Link>\r\n                        <Link to=\"/actions\" onClick={() => dispatch(fetchFilmsSearchRefresh())}>\r\n                            <li>Actions</li>\r\n                        </Link>\r\n                        <Link to=\"/aventure\" onClick={() => dispatch(fetchFilmsSearchRefresh())}>\r\n                            <li>Aventure</li>\r\n                        </Link>\r\n                        <Link to=\"/comedie\" onClick={() => dispatch(fetchFilmsSearchRefresh())}>\r\n                            <li>Comédie</li>\r\n                        </Link>\r\n                        <Link to=\"/horreur\" onClick={() => dispatch(fetchFilmsSearchRefresh())}>\r\n                            <li>Horreur</li>\r\n                        </Link>\r\n                        <Link to=\"/thriller\" onClick={() => dispatch(fetchFilmsSearchRefresh())}>\r\n                            <li>Thriller</li>\r\n                        </Link>\r\n                    </ul>\r\n                    <form onSubmit={_onSubmit} >\r\n                        <input className=\"searchInput\" type=\"text\" placeholder=\"Titre du film\" name=\"nomFilm\"></input>\r\n                    </form>\r\n                </div>\r\n            </nav>\r\n        </header>\r\n\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        filmSearch: state.filmSearch\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchFilmsSearch: (search) => dispatch(fetchFilmsSearch(search))\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","export const FETCH_FILMS_GENRES_SUCCES = 'FETCH_FILMS_GENRES_SUCCES';\r\nexport const FETCH_FILMS_GENRES_FAIL = 'FETCH_FILMS_GENRES_FAIL';\r\n\r\n\r\n","import { FETCH_FILMS_GENRES_SUCCES, FETCH_FILMS_GENRES_FAIL } from './types';\r\nimport Axios from 'axios';\r\n\r\nexport const fetchFilmsSuccess = (films) => {\r\n    return {\r\n        type: FETCH_FILMS_GENRES_SUCCES,\r\n        payload: films\r\n    }\r\n}\r\n\r\nconst fetchFilmsFail = (error) => {\r\n    return {\r\n        type: FETCH_FILMS_GENRES_FAIL,\r\n        payload: error\r\n    }\r\n}\r\n\r\nexport const fetchFilmsWithGenres = (id, pageNumber) => {\r\n    return (dispatch) => {\r\n        window.scrollTo(0, 0);\r\n        Axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=c0f2b3829e285f40ea8719b23184af1b&language=fr&with_genres=${id}&page=${pageNumber}`)\r\n            .then(response => {\r\n                const films = response.data;\r\n                dispatch(fetchFilmsSuccess(films));\r\n            })\r\n            .catch(error => {\r\n                const errorMsg = error.message;\r\n                dispatch(fetchFilmsFail(errorMsg));\r\n            })\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport './Pagination.css';\r\n\r\nimport { fetchFilmsWithGenres } from '../../redux/filmWithGenres/filmWithGenresActions';\r\nimport { connect, useDispatch } from 'react-redux';\r\n\r\n\r\nconst Pagination = ({ id, filmsData }) => {\r\n    const pageLinks = []\r\n    const dispatch = useDispatch();\r\n\r\n\r\n\r\n    const filmsTotalPages = filmsData.totalPages && filmsData.totalPages;\r\n    const filmsCurrentPage = filmsData.currentPage && filmsData.currentPage;\r\n\r\n    for (let i = 1; i <= filmsTotalPages; i++) {\r\n        let active = filmsCurrentPage === i ? 'active' : '';\r\n\r\n        pageLinks.push(<li className={`paginationList ${active}`} key={i} onClick={() => dispatch(fetchFilmsWithGenres(id, i))}><a >{i}</a></li>)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"paginationContainer\">\r\n            <ul className=\"paginationList\">\r\n                {filmsCurrentPage > 1 ? <li onClick={() => dispatch(fetchFilmsWithGenres(id, filmsCurrentPage - 1))}><a className={`paginationList`}>Prec</a></li> : ''}\r\n                {filmsCurrentPage > 1 ? <li onClick={() => dispatch(fetchFilmsWithGenres(id, filmsTotalPages - filmsTotalPages + 1))}><a className={`paginationList`}> &#60;&#60; </a></li> : ''}\r\n                {pageLinks[filmsCurrentPage - 3]}{pageLinks[filmsCurrentPage - 2]}{pageLinks[filmsCurrentPage - 1]}{pageLinks[filmsCurrentPage]}{pageLinks[filmsCurrentPage + 1]}\r\n                {filmsCurrentPage > 1 && filmsCurrentPage !== filmsTotalPages ? <li onClick={() => dispatch(fetchFilmsWithGenres(id, filmsTotalPages))}><a className={`paginationList`}>>></a></li> : ''}\r\n                {filmsCurrentPage < filmsTotalPages + 1 && filmsCurrentPage !== filmsTotalPages ? <li onClick={() => dispatch(fetchFilmsWithGenres(id, filmsCurrentPage + 1))}><a className={`paginationList`}>Suivant</a></li> : ''}\r\n            </ul>\r\n        </div >\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        filmsData: state.filmsWithGenres,\r\n        filmSearch: state.filmSearch\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        fetchFilmsWithGenres: (id, page) => dispatch(fetchFilmsWithGenres(id, page))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Pagination);","import React, { useState, useEffect } from 'react';\r\nimport './FilmsWithGenres.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlayCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport Pagination from '../Pagination/Pagination';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { fetchFilmsWithGenres } from '../../redux/filmWithGenres/filmWithGenresActions';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst FilmsWithGenres = ({ id, titreSection, filmsData, fetchFilmsWithGenres, filmSearch }) => {\r\n\r\n    const filmsTotalResults = filmsData.totalResults && filmsData.totalResults;\r\n\r\n    useEffect(() => {\r\n        fetchFilmsWithGenres(id, 1);\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"flexBox\" >\r\n                <div className=\"titreSection\"><h1 className=\"titre\">{titreSection}</h1></div>\r\n                {filmSearch.searchFilmsFetched && filmSearch.searchFilmsFetched.results && filmSearch.searchFilmsFetched.results.length > 0 ? filmSearch.searchFilmsFetched.results.map((search, index) => (\r\n                    <div className=\"cardFilm\" key={index}>\r\n                        <div className=\"playIcon\">\r\n                            <Link to={`/${search.id}`} className=\"icon\" title=\"Regarder\">\r\n                                <FontAwesomeIcon icon={faPlayCircle} />\r\n                            </Link>\r\n                            <p className=\"titres\">{search.title}</p>\r\n                        </div>\r\n                        <img alt={\"\"} src={`https://image.tmdb.org/t/p/original${search.poster_path}`} />\r\n                    </div>\r\n                )) : filmsData.filmsFetched && filmsData.filmsFetched.results.map((search, index) => (\r\n                    <div className=\"cardFilm\" key={index}>\r\n                        <div className=\"playIcon\">\r\n                            <Link to={`/${search.id}`} className=\"icon\" title=\"Regarder\">\r\n                                <FontAwesomeIcon icon={faPlayCircle} />\r\n                            </Link>\r\n                            <p className=\"titres\">{search.title}</p>\r\n                        </div>\r\n                        <img alt={\"\"} src={`https://image.tmdb.org/t/p/original${search.poster_path}`} />\r\n                    </div>\r\n                ))}\r\n            </div >\r\n            {filmsTotalResults > 20 ? <Pagination id={id} /> : ''}\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        filmsData: state.filmsWithGenres,\r\n        filmSearch: state.filmSearch\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        fetchFilmsWithGenres: (id, page) => dispatch(fetchFilmsWithGenres(id, page))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FilmsWithGenres);\r\n","export const FETCH_FILMS_DETAILS_SUCCES = 'FETCH_FILMS_DETAILS_SUCCES';\r\nexport const FETCH_FILMS_DETAILS_FAIL = 'FETCH_FILMS_DETAILS_FAIL';","import { FETCH_FILMS_DETAILS_SUCCES, FETCH_FILMS_DETAILS_FAIL } from './types';\r\nimport Axios from 'axios';\r\n\r\nexport const fetchFilmsDetailsSuccess = (details) => {\r\n    return {\r\n        type: FETCH_FILMS_DETAILS_SUCCES,\r\n        payload: details\r\n    }\r\n}\r\n\r\nexport const fetchFilmsDetailsFail = (error) => {\r\n    return {\r\n        type: FETCH_FILMS_DETAILS_FAIL,\r\n        payload: error\r\n    }\r\n}\r\n\r\nexport const fetchFilmsDetails = (params) => {\r\n    return (dispatch) => {\r\n        Axios.get(`https://api.themoviedb.org/3/movie/${params}?api_key=c0f2b3829e285f40ea8719b23184af1b&language=fr`)\r\n            .then(response => {\r\n                const detailsFilmData = response.data;\r\n                dispatch(fetchFilmsDetailsSuccess(detailsFilmData));\r\n            })\r\n            .catch(error => {\r\n                const errorMsgFilmDetails = error.message;\r\n                dispatch(fetchFilmsDetailsFail(errorMsgFilmDetails));\r\n            })\r\n    }\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport './FilmsDetails.css';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { fetchFilmsDetails } from '../../redux/filmsDetails/filmsDetailsActions';\r\n\r\n\r\nconst FilmsDetails = ({ match, fetchFilmsDetails, filmsDetails }) => {\r\n\r\n    useEffect(() => {\r\n        fetchFilmsDetails();\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"flexBox\" >\r\n            <div className=\"videoContainer\">\r\n                <div className=\"titreFilms\"><h1 className=\"titre\">{filmsDetails.filmsDetailsFetched && filmsDetails.filmsDetailsFetched.title}</h1></div>\r\n                <img alt={\"\"} src={`https://image.tmdb.org/t/p/original${filmsDetails.filmsDetailsFetched && filmsDetails.filmsDetailsFetched.backdrop_path}`} />\r\n            </div>\r\n            <div className=\"infosDiv\">\r\n                <p className=\"filmsOverview\">{filmsDetails.filmsDetailsFetched && filmsDetails.filmsDetailsFetched.overview}</p>\r\n                <p className=\"filmsOverview\">Titre original: &nbsp;&nbsp;&nbsp;&nbsp; {filmsDetails.filmsDetailsFetched && filmsDetails.filmsDetailsFetched.original_title}</p>\r\n                <p className=\"filmsOverview\">Date de sortie: &nbsp;&nbsp;&nbsp;&nbsp; {filmsDetails.filmsDetailsFetched && filmsDetails.filmsDetailsFetched.release_date}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        filmsDetails: state.filmsDetails\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        fetchFilmsDetails: () => dispatch(fetchFilmsDetails(ownProps.match.params.id))\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FilmsDetails);","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './SideDrawer.css';\r\n\r\nconst sideDrawer = ({ getMovies, refresh, click, show }) => {\r\n    let drawerClasses = 'side-drawer';\r\n    if (show) {\r\n        drawerClasses = 'side-drawer open';\r\n    }\r\n\r\n    return (\r\n        <nav className={drawerClasses}>\r\n            <ul>\r\n                <form onSubmit={getMovies} >\r\n                    <input className=\"sideSearchInput\" type=\"text\" placeholder=\"Titre du film\" name=\"nomFilm\"></input>\r\n                </form>\r\n                <Link to=\"/\" exact onClick={refresh, click}>\r\n                    <li>Accueil</li>\r\n                </Link>\r\n                <Link to=\"/actions\" onClick={refresh, click}>\r\n                    <li>Actions</li>\r\n                </Link>\r\n                <Link to=\"/aventure\" onClick={refresh, click}>\r\n                    <li>Aventure</li>\r\n                </Link>\r\n                <Link to=\"/comedie\" onClick={refresh, click}>\r\n                    <li>Comédie</li>\r\n                </Link>\r\n                <Link to=\"/horreur\" onClick={refresh, click}>\r\n                    <li>Horreur</li>\r\n                </Link>\r\n                <Link to=\"/thriller\" onClick={refresh, click}>\r\n                    <li>Thriller</li>\r\n                </Link>\r\n            </ul>\r\n\r\n        </nav>\r\n    )\r\n};\r\n\r\nexport default sideDrawer;","import React from 'react';\r\nimport './Backdrop.css';\r\n\r\nconst backdrop = ({ click }) => (\r\n    <div className=\"backdrop\" onClick={click}></div>\r\n);\r\n\r\nexport default backdrop;","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Header from './Components/Navbar/Header';\r\nimport FilmsWithGenres from './Components/FilmsWithGenres/FilmsWithGenres';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport FilmsDetails from './Components/FilmsDetails/FilmsDetails';\r\nimport SideDrawer from './Components/SideDrawer/SideDrawer';\r\nimport Backdrop from './Components/Backdrop/Backdrop';\r\n\r\n\r\n\r\nconst App = () => {\r\n\r\n  const [sideDrawerOpen, setSideDrawerOpen] = useState(false);\r\n\r\n\r\n  const drawerToggleClickHandler = () => {\r\n    setSideDrawerOpen(!sideDrawerOpen);\r\n  }\r\n\r\n  const backdropClickHandler = () => {\r\n    setSideDrawerOpen(false);\r\n  }\r\n\r\n  let backdrop;\r\n\r\n  if (sideDrawerOpen) {\r\n    backdrop = <Backdrop click={backdropClickHandler} />;\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"body\">\r\n        <Header drawerClickHandler={drawerToggleClickHandler} />\r\n        <SideDrawer click={backdropClickHandler} show={sideDrawerOpen} />\r\n        {backdrop}\r\n        <Switch>\r\n          <Route path=\"/\" exact component={() => <FilmsWithGenres id={''} titreSection={\"FILMS POPULAIRES\"} />} />\r\n          <Route path=\"/actions\" component={() => <FilmsWithGenres id={`28`} titreSection={\"FILMS D'ACTIONS\"} />} />\r\n          <Route path=\"/aventure\" component={() => <FilmsWithGenres id={`12`} titreSection={\"FILMS D'AVENTURE\"} />} />\r\n          <Route path=\"/comedie\" component={() => <FilmsWithGenres id={`35`} titreSection={\"COMEDIE\"} />} />\r\n          <Route path=\"/horreur\" component={() => <FilmsWithGenres id={`27`} titreSection={\"FILMS D'HORREUR\"} />} />\r\n          <Route path=\"/thriller\" component={() => <FilmsWithGenres id={`53`} titreSection={\"THRILLER\"} />} />\r\n          <Route path=\"/:id\" component={FilmsDetails} />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { FETCH_FILMS_GENRES_SUCCES, FETCH_FILMS_GENRES_FAIL } from './types';\r\n\r\n\r\nconst initialeState = () => {\r\n    return {\r\n        filmsFetched: [],\r\n        error: '',\r\n        totalResults: 0,\r\n        totalPages: 0,\r\n        currentPage: 1\r\n    }\r\n}\r\n\r\nconst filmWithGenresReducers = (state = initialeState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_FILMS_GENRES_SUCCES:\r\n            return {\r\n                filmsFetched: action.payload,\r\n                error: '',\r\n                totalResults: action.payload.total_results,\r\n                totalPages: action.payload.total_pages,\r\n                currentPage: action.payload.page\r\n            }\r\n        case FETCH_FILMS_GENRES_FAIL:\r\n            return {\r\n                filmsFetched: [],\r\n                error: action.payload,\r\n                totalResults: 0,\r\n                totalPages: 0,\r\n                currentPage: 1\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default filmWithGenresReducers;","import { FETCH_FILMS_SEARCH_SUCCES, FETCH_FILMS_SEARCH_FAIL, FETCH_FILMS_SEARCH_REFRESH } from './types';\r\n\r\n\r\nconst initialeState = () => {\r\n    return {\r\n        searchFilmsFetched: [],\r\n        error: ''\r\n    }\r\n}\r\n\r\nconst filmSearchReducers = (state = initialeState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_FILMS_SEARCH_SUCCES:\r\n            return {\r\n                searchFilmsFetched: action.payload,\r\n                error: ''\r\n            }\r\n        case FETCH_FILMS_SEARCH_FAIL:\r\n            return {\r\n                searchFilmsFetched: [],\r\n                error: action.payload\r\n            }\r\n\r\n        case FETCH_FILMS_SEARCH_REFRESH:\r\n            return {\r\n                searchFilmsFetched: [],\r\n                error: ''\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default filmSearchReducers;","import { FETCH_FILMS_DETAILS_SUCCES, FETCH_FILMS_DETAILS_FAIL } from './types';\r\n\r\nconst initialeState = () => {\r\n    return {\r\n        filmsDetailsFetched: [],\r\n        error: ''\r\n    }\r\n}\r\n\r\nconst filmsDetailsReducers = (state = initialeState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_FILMS_DETAILS_SUCCES:\r\n            return {\r\n                filmsDetailsFetched: action.payload,\r\n                error: ''\r\n            }\r\n        case FETCH_FILMS_DETAILS_FAIL:\r\n            return {\r\n                filmsDetailsFetched: [],\r\n                error: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default filmsDetailsReducers;","import { combineReducers } from 'redux';\r\nimport filmWithGenresReducers from './filmWithGenres/filmWithGenresReducers';\r\nimport filmSearchReducers from './filmSearch/filmSearchReducers';\r\nimport filmsDetailsReducers from './filmsDetails/filmsDetailsReducers';\r\n\r\nconst rootReducer = combineReducers({\r\n    filmsWithGenres: filmWithGenresReducers,\r\n    filmSearch: filmSearchReducers,\r\n    filmsDetails: filmsDetailsReducers\r\n})\r\n\r\nexport default rootReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport rootReducer from './redux/rootReducer';\r\nimport thunk from 'redux-thunk';\r\nimport { Provider } from 'react-redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\n\r\nlet store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}